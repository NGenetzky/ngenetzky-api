---
swagger: "2.0"
info:
  description: "This is an API I am designing for myself using swagger.\nYou can find\
    \  out more about Swagger at [http://swagger.io](http://swagger.io)\n"
  version: "0.0.1"
  title: "NGenetzky's API"
  contact:
    email: "Nathan@Genetzky.us"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "0.0.0.0"
basePath: "/v0"
tags:
- name: "event"
  description: "Operations involving events"
- name: "object"
  description: "Operations on objects"
schemes:
- "https"
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /call/{objId}/{name}:
    post:
      tags:
      - "object"
      summary: "Call a function/method."
      operationId: "call_fn"
      parameters:
      - name: "objId"
        in: "path"
        description: "Identified object to act on."
        required: true
        type: "integer"
        format: "uint"
      - name: "name"
        in: "path"
        description: "Function/Method Name."
        required: true
        type: "string"
      - in: "body"
        name: "args"
        description: "Parameters/Arguments"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.object_controller"
  /state/{objId}/reg/{index}:
    get:
      tags:
      - "object"
      summary: "Get the value of a register"
      operationId: "get_reg"
      parameters:
      - name: "objId"
        in: "path"
        description: "Identified object to act on."
        required: true
        type: "integer"
        format: "uint"
      - name: "index"
        in: "path"
        description: "Index of the register."
        required: true
        type: "integer"
        format: "uint"
      responses:
        200:
          description: "Obtained"
          schema:
            type: "integer"
            format: "int64"
        400:
          description: "Invalid ID/Index supplied"
        404:
          description: "Not found"
      x-swagger-router-controller: "swagger_server.controllers.object_controller"
  /state/{objId}:
    get:
      tags:
      - "object"
      summary: "Get the state of the object."
      operationId: "get_state"
      parameters:
      - name: "objId"
        in: "path"
        description: "Identified object to act on."
        required: true
        type: "integer"
        format: "uint"
      responses:
        200:
          description: "Obtained."
          schema:
            type: "object"
            properties: {}
      x-swagger-router-controller: "swagger_server.controllers.object_controller"
    patch:
      tags:
      - "object"
      summary: "Partially modify the state of an object"
      operationId: "patch_state"
      parameters:
      - name: "objId"
        in: "path"
        description: "Identified object to act on."
        required: true
        type: "integer"
        format: "uint"
      - in: "body"
        name: "body"
        description: "Object representing event"
        required: true
        schema:
          $ref: "#/definitions/PatchRequest"
      responses:
        405:
          description: "Validation exception"
      x-swagger-router-controller: "swagger_server.controllers.object_controller"
  /event:
    post:
      tags:
      - "event"
      summary: "Add a new event"
      operationId: "add_event"
      parameters:
      - in: "body"
        name: "body"
        description: "Object representing event"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        405:
          description: "Validation exception"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
    put:
      tags:
      - "event"
      summary: "Update an existing event"
      operationId: "update_event"
      parameters:
      - in: "body"
        name: "body"
        description: "Object representing event"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Event not found"
        405:
          description: "Validation exception"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /event/{eventId}:
    get:
      tags:
      - "event"
      summary: "Find event by ID"
      description: "Returns a single event"
      operationId: "get_event_by_id"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
definitions:
  ApiResponse:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
        example: "everything is ok"
    example:
      code: 0
      message: "everything is ok"
  Device:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      objects:
        type: "array"
        items:
          $ref: "#/definitions/UniversalObject"
  Event:
    type: "object"
    required:
    - "name"
    - "published_at"
    properties:
      id:
        type: "integer"
        format: "int64"
      published_at:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      data:
        type: "string"
        description: "Event data in JSON format"
        default: "{}"
      ttl:
        type: "integer"
        format: "int64"
        description: "How long the event should persist (seconds)"
        default: 60
    example:
      data: "{}"
      name: "name"
      id: 0
      published_at: "2000-01-23T04:56:07.000+00:00"
      ttl: 6
  UniversalObject:
    properties:
      uuid:
        type: "string"
        format: "uuid"
      type:
        type: "string"
      id:
        type: "integer"
        format: "int32"
    example:
      uuid: "0729a580-2240-11e6-9eb5-0002a5d5c51b"
      type: "led"
      id: "1"
  PatchRequest:
    type: "array"
    items:
      $ref: "#/definitions/PatchDocument"
  PatchDocument:
    required:
    - "op"
    - "path"
    properties:
      op:
        type: "string"
        description: "The operation to be performed"
        enum:
        - "add"
        - "remove"
        - "replace"
        - "move"
        - "copy"
        - "test"
      path:
        type: "string"
        description: "A JSON-Pointer"
      value:
        type: "object"
        description: "The value to be used within the operations."
        properties: {}
      from:
        type: "string"
        description: "A string containing a JSON Pointer value."
    externalDocs:
      description: "JSON Patch is a format for describing changes to a JSON document.\
        \ OpenAPI spec by [Aaron Saray](https://aaronsaray.com/2016/using-json-patch-in-swagger)"
      url: "http://jsonpatch.com/"
    description: "A JSONPatch document as defined by RFC 6902."
  Register:
    type: "object"
    properties:
      format:
        type: "string"
        enum:
        - "uint8"
        - "uint64"
        - "int32"
        - "int64"
      value:
        type: "integer"
        format: "uint64"
    example:
      format: "uint8"
      value: 255
  SavedState:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      lastUpdate:
        type: "string"
        format: "date-time"
      hash:
        type: "integer"
        format: "int64"
        description: "Hash computed from the state."
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
externalDocs:
  description: "Feel free to look at the source code for this api."
  url: "https://github.com/NGenetzky/ngenetzky-api/"
