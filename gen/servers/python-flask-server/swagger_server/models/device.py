# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.universal_object import UniversalObject
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Device(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, objects: List[UniversalObject]=None):
        """
        Device - a model defined in Swagger

        :param name: The name of this Device.
        :type name: str
        :param objects: The objects of this Device.
        :type objects: List[UniversalObject]
        """
        self.swagger_types = {
            'name': str,
            'objects': List[UniversalObject]
        }

        self.attribute_map = {
            'name': 'name',
            'objects': 'objects'
        }

        self._name = name
        self._objects = objects

    @classmethod
    def from_dict(cls, dikt) -> 'Device':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Device of this Device.
        :rtype: Device
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this Device.

        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Device.

        :param name: The name of this Device.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def objects(self) -> List[UniversalObject]:
        """
        Gets the objects of this Device.

        :return: The objects of this Device.
        :rtype: List[UniversalObject]
        """
        return self._objects

    @objects.setter
    def objects(self, objects: List[UniversalObject]):
        """
        Sets the objects of this Device.

        :param objects: The objects of this Device.
        :type objects: List[UniversalObject]
        """

        self._objects = objects

