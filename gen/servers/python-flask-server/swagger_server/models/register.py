# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Register(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, format: str=None, value: int=None):
        """
        Register - a model defined in Swagger

        :param format: The format of this Register.
        :type format: str
        :param value: The value of this Register.
        :type value: int
        """
        self.swagger_types = {
            'format': str,
            'value': int
        }

        self.attribute_map = {
            'format': 'format',
            'value': 'value'
        }

        self._format = format
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Register':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Register of this Register.
        :rtype: Register
        """
        return deserialize_model(dikt, cls)

    @property
    def format(self) -> str:
        """
        Gets the format of this Register.

        :return: The format of this Register.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """
        Sets the format of this Register.

        :param format: The format of this Register.
        :type format: str
        """
        allowed_values = ["uint8", "uint64", "int32", "int64"]
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def value(self) -> int:
        """
        Gets the value of this Register.

        :return: The value of this Register.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """
        Sets the value of this Register.

        :param value: The value of this Register.
        :type value: int
        """

        self._value = value

