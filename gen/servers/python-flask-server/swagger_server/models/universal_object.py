# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UniversalObject(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, type: str=None, id: int=None):
        """
        UniversalObject - a model defined in Swagger

        :param uuid: The uuid of this UniversalObject.
        :type uuid: str
        :param type: The type of this UniversalObject.
        :type type: str
        :param id: The id of this UniversalObject.
        :type id: int
        """
        self.swagger_types = {
            'uuid': str,
            'type': str,
            'id': int
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'type': 'type',
            'id': 'id'
        }

        self._uuid = uuid
        self._type = type
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'UniversalObject':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UniversalObject of this UniversalObject.
        :rtype: UniversalObject
        """
        return deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """
        Gets the uuid of this UniversalObject.

        :return: The uuid of this UniversalObject.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """
        Sets the uuid of this UniversalObject.

        :param uuid: The uuid of this UniversalObject.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def type(self) -> str:
        """
        Gets the type of this UniversalObject.

        :return: The type of this UniversalObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this UniversalObject.

        :param type: The type of this UniversalObject.
        :type type: str
        """

        self._type = type

    @property
    def id(self) -> int:
        """
        Gets the id of this UniversalObject.

        :return: The id of this UniversalObject.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this UniversalObject.

        :param id: The id of this UniversalObject.
        :type id: int
        """

        self._id = id

