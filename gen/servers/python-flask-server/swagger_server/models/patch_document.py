# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class PatchDocument(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, op: str=None, path: str=None, value: object=None, _from: str=None):
        """
        PatchDocument - a model defined in Swagger

        :param op: The op of this PatchDocument.
        :type op: str
        :param path: The path of this PatchDocument.
        :type path: str
        :param value: The value of this PatchDocument.
        :type value: object
        :param _from: The _from of this PatchDocument.
        :type _from: str
        """
        self.swagger_types = {
            'op': str,
            'path': str,
            'value': object,
            '_from': str
        }

        self.attribute_map = {
            'op': 'op',
            'path': 'path',
            'value': 'value',
            '_from': 'from'
        }

        self._op = op
        self._path = path
        self._value = value
        self.__from = _from

    @classmethod
    def from_dict(cls, dikt) -> 'PatchDocument':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatchDocument of this PatchDocument.
        :rtype: PatchDocument
        """
        return deserialize_model(dikt, cls)

    @property
    def op(self) -> str:
        """
        Gets the op of this PatchDocument.
        The operation to be performed

        :return: The op of this PatchDocument.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op: str):
        """
        Sets the op of this PatchDocument.
        The operation to be performed

        :param op: The op of this PatchDocument.
        :type op: str
        """
        allowed_values = ["add", "remove", "replace", "move", "copy", "test"]
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def path(self) -> str:
        """
        Gets the path of this PatchDocument.
        A JSON-Pointer

        :return: The path of this PatchDocument.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """
        Sets the path of this PatchDocument.
        A JSON-Pointer

        :param path: The path of this PatchDocument.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def value(self) -> object:
        """
        Gets the value of this PatchDocument.
        The value to be used within the operations.

        :return: The value of this PatchDocument.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value: object):
        """
        Sets the value of this PatchDocument.
        The value to be used within the operations.

        :param value: The value of this PatchDocument.
        :type value: object
        """

        self._value = value

    @property
    def _from(self) -> str:
        """
        Gets the _from of this PatchDocument.
        A string containing a JSON Pointer value.

        :return: The _from of this PatchDocument.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """
        Sets the _from of this PatchDocument.
        A string containing a JSON Pointer value.

        :param _from: The _from of this PatchDocument.
        :type _from: str
        """

        self.__from = _from

