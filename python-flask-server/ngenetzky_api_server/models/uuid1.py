# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ngenetzky_api_server.models.base_model_ import Model
from ngenetzky_api_server import util


class Uuid1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, node: int=None, time: int=None):  # noqa: E501
        """Uuid1 - a model defined in Swagger

        :param uuid: The uuid of this Uuid1.  # noqa: E501
        :type uuid: str
        :param node: The node of this Uuid1.  # noqa: E501
        :type node: int
        :param time: The time of this Uuid1.  # noqa: E501
        :type time: int
        """
        self.swagger_types = {
            'uuid': str,
            'node': int,
            'time': int
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'node': 'node',
            'time': 'time'
        }

        self._uuid = uuid
        self._node = node
        self._time = time

    @classmethod
    def from_dict(cls, dikt) -> 'Uuid1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The uuid1 of this Uuid1.  # noqa: E501
        :rtype: Uuid1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Uuid1.


        :return: The uuid of this Uuid1.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Uuid1.


        :param uuid: The uuid of this Uuid1.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def node(self) -> int:
        """Gets the node of this Uuid1.


        :return: The node of this Uuid1.
        :rtype: int
        """
        return self._node

    @node.setter
    def node(self, node: int):
        """Sets the node of this Uuid1.


        :param node: The node of this Uuid1.
        :type node: int
        """

        self._node = node

    @property
    def time(self) -> int:
        """Gets the time of this Uuid1.


        :return: The time of this Uuid1.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time: int):
        """Sets the time of this Uuid1.


        :param time: The time of this Uuid1.
        :type time: int
        """

        self._time = time
