# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ngenetzky_api_server.models.base_model_ import Model
from ngenetzky_api_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, published_at: datetime=None, name: str=None, data: str='{}', ttl: int=60):  # noqa: E501
        """Event - a model defined in Swagger

        :param id: The id of this Event.  # noqa: E501
        :type id: int
        :param published_at: The published_at of this Event.  # noqa: E501
        :type published_at: datetime
        :param name: The name of this Event.  # noqa: E501
        :type name: str
        :param data: The data of this Event.  # noqa: E501
        :type data: str
        :param ttl: The ttl of this Event.  # noqa: E501
        :type ttl: int
        """
        self.swagger_types = {
            'id': int,
            'published_at': datetime,
            'name': str,
            'data': str,
            'ttl': int
        }

        self.attribute_map = {
            'id': 'id',
            'published_at': 'published_at',
            'name': 'name',
            'data': 'data',
            'ttl': 'ttl'
        }

        self._id = id
        self._published_at = published_at
        self._name = name
        self._data = data
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def published_at(self) -> datetime:
        """Gets the published_at of this Event.


        :return: The published_at of this Event.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at: datetime):
        """Sets the published_at of this Event.


        :param published_at: The published_at of this Event.
        :type published_at: datetime
        """
        if published_at is None:
            raise ValueError("Invalid value for `published_at`, must not be `None`")  # noqa: E501

        self._published_at = published_at

    @property
    def name(self) -> str:
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def data(self) -> str:
        """Gets the data of this Event.

        Event data in JSON format  # noqa: E501

        :return: The data of this Event.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this Event.

        Event data in JSON format  # noqa: E501

        :param data: The data of this Event.
        :type data: str
        """

        self._data = data

    @property
    def ttl(self) -> int:
        """Gets the ttl of this Event.

        How long the event should persist (seconds)  # noqa: E501

        :return: The ttl of this Event.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl: int):
        """Sets the ttl of this Event.

        How long the event should persist (seconds)  # noqa: E501

        :param ttl: The ttl of this Event.
        :type ttl: int
        """

        self._ttl = ttl
